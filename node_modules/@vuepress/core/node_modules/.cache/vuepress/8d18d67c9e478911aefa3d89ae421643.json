{"remainingRequest":"D:\\mygithub\\mydocs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\mygithub\\mydocs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\mygithub\\mydocs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\mygithub\\mydocs\\node_modules\\@vuepress-reco\\vuepress-plugin-bgm-player\\bin\\BgMusic.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\mygithub\\mydocs\\node_modules\\@vuepress-reco\\vuepress-plugin-bgm-player\\bin\\BgMusic.vue","mtime":499162500000},{"path":"D:\\mygithub\\mydocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mygithub\\mydocs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\mygithub\\mydocs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mygithub\\mydocs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}