{"remainingRequest":"D:\\mygithub\\myblogs\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\mygithub\\myblogs\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","dependencies":[{"path":"D:\\mygithub\\myblogs\\node_modules\\vuepress-plugin-ribbon-animation\\bin\\ribbon.js","mtime":499162500000},{"path":"D:\\mygithub\\myblogs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\mygithub\\myblogs\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}